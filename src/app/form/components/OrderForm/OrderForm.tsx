"use client"
import OrderDescription from "@/app/changeOrder/components/OrderDescription"
import ServicesWindow from "@/app/changeOrder/components/ServicesWindow"
import Cities from "@/app/form/components/OrderForm/components/Cities"
import CustomerInfo from "@/app/form/components/OrderForm/components/CustomerInfo"
import DateAndTime from "@/app/form/components/OrderForm/components/DateAndTime"
import Masters from "@/app/form/components/OrderForm/components/Masters"
import { User } from "@/hooks/useUserByAt"
import { useOrderStore } from "@/stores/orderStore"
import { useRouter } from "next/navigation"
import { useEffect } from "react"

interface Props {
    user: User;
    leadId?: string;
}

export default function OrderForm({ leadId }: Props) {
    const router = useRouter();
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    const user = useOrderStore(state => state.currentUser)
    const team = typeof user?.team === 'string' ? user.team : user?.team ?? 'A';
    const city = useOrderStore(state => state.formData.city);
    const teamId = useOrderStore(state => state.formData.teamId);
    const shouldRedirectToMyOrders = useOrderStore(state => state.shouldRedirectToMyOrders);
    const { updateFormData} = useOrderStore();
    


    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ store –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ teamId === "Init"
    useEffect(() => {
        if (team && teamId === "Init") {
            updateFormData('teamId', team);
           useOrderStore.setState({currentLeadID: ""})
        }
    }, [team, teamId, updateFormData]);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    useEffect(() => {
        const currentFormData = useOrderStore.getState().formData;
        console.log('OrderForm: Initializing with formData:', currentFormData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ changeOrder (–µ—Å–ª–∏ –µ—Å—Ç—å leadId, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ changeOrder)
        if (leadId) {
            console.log('OrderForm: This is changeOrder, skipping initialization');
            return;
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º dateSlots - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–º
        let dateSlotsArray: string[] = [];
        if (currentFormData.dateSlots) {
            if (Array.isArray(currentFormData.dateSlots)) {
                // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
                currentFormData.dateSlots.forEach((item: any) => {
                    if (typeof item === 'string') {
                        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—è—Ç—ã–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
                        if (item.includes(',')) {
                            dateSlotsArray.push(...item.split(',').filter((slot: string) => slot.trim().length > 0));
                        } else {
                            dateSlotsArray.push(item);
                        }
                    }
                });
            } else if (typeof currentFormData.dateSlots === 'string') {
                // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
                const slotsString = currentFormData.dateSlots as string;
                if (slotsString.length > 0) {
                    dateSlotsArray = slotsString.split(',').filter((slot: string) => slot.trim().length > 0);
                }
            }
        }
        
        console.log('OrderForm: Parsed dateSlots array:', dateSlotsArray);
        
        // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ—Ç—ã, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        if (dateSlotsArray.length > 0) {
            const firstSlot = dateSlotsArray[0];
            if (firstSlot) {
                const parts = firstSlot.split('-');
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É
                const dateFromSlot = parts[1]; // –§–æ—Ä–º–∞—Ç: YYYY-MM-DD
                if (dateFromSlot && dateFromSlot.match(/^\d{4}-\d{2}-\d{2}$/) && !currentFormData.date) {
                    console.log('OrderForm: Auto-setting date from slot:', dateFromSlot);
                    // –£–±–∏—Ä–∞–µ–º updateFormData –æ—Ç—Å—é–¥–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è
                const hour = parts[4];
                const amPM = parts[5];
                if (hour && amPM && !currentFormData.time) {
                    const timeValue = hour + amPM;
                    console.log('OrderForm: Auto-setting time from slot:', timeValue);
                    // –£–±–∏—Ä–∞–µ–º updateFormData –æ—Ç—Å—é–¥–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                }
            }
        }
    }, [leadId]) // –£–±–∏—Ä–∞–µ–º updateFormData –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

    useEffect(() => {
        
        console.log(team)
    })

    // üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ myOrders
    useEffect(() => {
        if (shouldRedirectToMyOrders) {
            console.log('üîÑ Redirecting to My Orders...');
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            useOrderStore.setState({ shouldRedirectToMyOrders: false });
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É myOrders —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                router.push('/myOrders');
          
        }
    }, [shouldRedirectToMyOrders, router]);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Cities —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ (Init)
    const shouldShowCities = teamId === "Init" || user?.team === teamId;

    return (
        <div className="space-y-6">
            <CustomerInfo/>
            <DateAndTime/>
            {shouldShowCities && (
                <Cities team={team}/>
            )}
            <Masters team={team} city={city} />
            <OrderDescription/>
            <ServicesWindow/>
        </div>
    );
}