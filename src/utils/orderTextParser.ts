export interface ParsedOrderData {
  size: string;
  mountType: string;
  type: string;
  wires: string;
  addOns: string;
}

export function parseOrderText(text: string): ParsedOrderData {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ–∫—Å—Ç–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é —ç–º–æ–¥–∑–∏ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)
  const hasRussianEmojis = /üì©|üë§|üìç|üèõÔ∏è|üìû|üìù|üîπ|üÜî/.test(text);
  
  if (hasRussianEmojis) {
    return parseRussianFormat(text);
  } else {
    return parseEnglishFormat(text);
  }
}

function parseEnglishFormat(text: string): ParsedOrderData {
  const result: ParsedOrderData = {
    size: '',
    mountType: '',
    type: '',
    wires: '',
    addOns: ''
  };

  // –ò—â–µ–º —Å–µ–∫—Ü–∏—é "Form data" –∏ –ø–∞—Ä—Å–∏–º –ø–æ–ª—è –≤–Ω—É—Ç—Ä–∏ –Ω–µ—ë
  const formDataMatch = text.match(/Form data:([\s\S]*?)(?=UTM parameters:|$)/i);
  let searchSection = text;
  
  if (formDataMatch) {
    searchSection = formDataMatch[1];
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º size –∏–∑ —Å—Ç—Ä–æ–∫–∏ "size: ..."
  const sizeMatch = searchSection.match(/size:\s*([^\n\r]+)/i);
  if (sizeMatch) {
    result.size = sizeMatch[1].trim();
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º Mount type
  const mountTypeMatch = searchSection.match(/Mount type:\s*([^\n\r]+)/i);
  if (mountTypeMatch) {
    result.mountType = mountTypeMatch[1].trim();
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º Type (–º–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω—ã) - –∏—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ Mount type
  const typeMatch = searchSection.match(/Mount type:[^\n\r]*\n[^\n\r]*Type:\s*([^\n\r]+)/i);
  if (typeMatch) {
    result.type = typeMatch[1].trim();
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º Wires
  const wiresMatch = searchSection.match(/Wires:\s*([^\n\r]+)/i);
  if (wiresMatch) {
    result.wires = wiresMatch[1].trim();
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º Add-ons
  const addOnsMatch = searchSection.match(/Add-ons:\s*([^\n\r]+)/i);
  if (addOnsMatch) {
    result.addOns = addOnsMatch[1].trim();
  }

  return result;
}

function parseRussianFormat(text: string): ParsedOrderData {
  const result: ParsedOrderData = {
    size: '',
    mountType: '',
    type: '',
    wires: '',
    addOns: ''
  };

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
  const answers = text.match(/üîπ\s*\d+:\s*([^\n\r]+)/g);
  
  if (answers) {
    // –ò–Ω–¥–µ–∫—Å 0: size
    if (answers[0]) {
      result.size = extractValueFromAnswer(answers[0]);
    }
    
    // –ò–Ω–¥–µ–∫—Å 1: mount type
    if (answers[1]) {
      result.mountType = extractValueFromAnswer(answers[1]);
    }
    
    // –ò–Ω–¥–µ–∫—Å 2: type (–º–∞—Ç–µ—Ä–∏–∞–ª)
    if (answers[2]) {
      result.type = extractValueFromAnswer(answers[2]);
    }
    
    // –ò–Ω–¥–µ–∫—Å 3: wires
    if (answers[3]) {
      result.wires = extractValueFromAnswer(answers[3]);
    }
    
    // –ò–Ω–¥–µ–∫—Å 4: add-ons
    if (answers[4]) {
      result.addOns = extractValueFromAnswer(answers[4]);
    }
  }

  return result;
}

function extractValueFromAnswer(answerLine: string): string {
  // –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –Ω–æ–º–µ—Ä, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ
  const match = answerLine.match(/üîπ\s*\d+:\s*(.+)/);
  if (match) {
    return match[1].trim();
  }
  return '';
}
